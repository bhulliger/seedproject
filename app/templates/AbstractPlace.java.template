package @package@;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import com.google.gwt.place.shared.Place;

public abstract class AbstractPlace extends Place {

	public static final String PATH_DELIMITER = "/";
	public static final String PATH_QUERY_DELIMITER = "?";
	public static final String QUERY_DELIMITER = "&";
	public static final String QUERY_PARAMETER_DELIMITER = "=";

	private final CharSequence name;
	private final List<String> pathTokens = new ArrayList<>();
	private final Map<String, String> queryTokens = new LinkedHashMap<>();

	public AbstractPlace(CharSequence name) {
		this.name = name;
	}

	public CharSequence getName() {
		return name;
	}

	public List<String> getPathTokens() {
		return pathTokens;
	}

	public AbstractPlace addPath(String path) {
		if (path != null)
			pathTokens.add(path);

		return this;
	}

	public AbstractPlace addQueryParameter(String key, String value) {
		queryTokens.put(key, value);
		return this;
	}

	public AbstractPlace addQueryParameters(Map<String, String> parameters) {
		queryTokens.putAll(parameters);
		return this;
	}

	public String getQueryParameter(String parameter) {
		return queryTokens.get(parameter);
	}

	protected Map<String, String> getQueryTokens() {
		return queryTokens;
	}

	public String getToken() {
		return getPath() + (getQueryString().length() > 0 ? PATH_QUERY_DELIMITER + getQueryString() : "");
	}

	public static String getString(List<Integer> list) {
		if (list.isEmpty()) {
			return "root";
		}
		final StringBuilder sb = new StringBuilder();
		for (Integer integer : list) {
			if (sb.length() > 0) {
				sb.append("_");
			}
			sb.append(integer);
		}
		return sb.toString();
	}

	public static List<Integer> getList(String valueList) {
		final List<Integer> list = new ArrayList<Integer>();
		if (!"root".equals(valueList)) {
			String[] values = valueList.split("_");
			for (String value : values) {
				list.add(Integer.valueOf(value));
			}
		}
		return list;
	}

	private String getPath() {
		StringBuffer buffer = new StringBuffer();
		buffer.append(name);
		for (String pathToken : pathTokens) {
			buffer.append(PATH_DELIMITER).append(pathToken);
		}
		return buffer.toString();
	}

	private String getQueryString() {
		StringBuffer buffer = new StringBuffer();
		boolean first = true;
		for (String paramKey : queryTokens.keySet()) {
			if (first) {
				first = false;
			} else {
				buffer.append(QUERY_DELIMITER);
			}
			buffer.append(paramKey).append(QUERY_PARAMETER_DELIMITER).append(queryTokens.get(paramKey));
		}

		return buffer.toString();
	}

}
