// ############################################################################
// Group Definition
// ############################################################################
group = 'ch.essentialmustard'

// ############################################################################
// System Environment
// ############################################################################
ext.envProperties = System.getenv()

// ############################################################################
// Versioning
// ############################################################################
apply from: "$rootDir/gradle/versioning.gradle"

task writeVersionFile << {
	def versionfile = new File('version.txt')
	vesrionfile.text = "RELEASE_VERSION=" + project.version.toString()
}

// ############################################################################
// Environment
// ############################################################################
def env = project.hasProperty('env') ? project.getProperty('env') : 'local'
def config = new ConfigSlurper(env).parse(file("$rootDir/gradle/build.groovy").toURL())

allprojects {
	ext.config = config
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.0'
}

println '######################################################################'
println "# Environment: 	$env"
println "# Version: 	"	+ version
println "# Group: 	"		+  group
println "# Build Date: 	" 	+ new Date()  
println '######################################################################'

// ############################################################################
// QA & Code Analysis
// ############################################################################
apply plugin: "sonar-runner"

sonarRunner {
	sonarProperties {
		property "sonar.host.url", config.sonar.host.url
        property "sonar.jdbc.url", config.sonar.jdbc.url
        property "sonar.jdbc.driverClassName", config.sonar.jdbc.driverClassName
        property "sonar.jdbc.username", config.sonar.jdbc.username
        property "sonar.jdbc.password", config.sonar.jdbc.password
		property "sonar.projectName", config.sonar.projectName
		property "sonar.projectKey", config.sonar.projectKey
		property "sonar.exclusions" , config.sonar.exclusions
		property "sonar.jacoco.excludes", config.sonar.jacoco.excludes
		property "sonar.sourceEncoding", "UTF-8"

	}
}

// ############################################################################
// Global Projects definitions
// ############################################################################
buildscript {
	repositories {
		jcenter()
	}

	dependencies {
		classpath "com.terrafolio:gradle-jenkins-plugin:1.2.1"
	}
}

allprojects {

	// ########################################################################
	// Repositories
	// ########################################################################
	repositories {
		maven {
			url config.artifactRepository.publicRepo
		}
		mavenCentral()
	}

	buildscript {
		repositories {
			maven {
				url config.artifactRepository.publicRepo
			}
			mavenCentral()
		}
	}
}

// ############################################################################
// Global Subproject definitions
// ############################################################################
subprojects {
	apply plugin: "java"
	apply plugin: "eclipse"
	apply plugin: "eclipse-wtp"
	apply plugin: "jacoco"

	version = rootProject.version
	group = rootProject.group

	// ########################################################################
	// Source Code Configuration
	// ########################################################################
	sourceCompatibility = 1.8

	// ########################################################################
	// Dependencies
	// ########################################################################
	apply from: "$rootDir/dependencies.gradle"

	// ########################################################################
	// Source Sets
	// ########################################################################
	sourceSets {
		generated {
	        java {
	            srcDir 'src/generated/java'
	        }
	    }
	}

	// ########################################################################
	// Unit & Integration Tests
	// ########################################################################
	test {
		exclude "**/*IT.*"
	}

	task integrationTest(type: Test) {
		description 'Run the integration tests'
		filter {
			// only run tests that match the pattern *IT.java*
			includeTestsMatching "*IT.java"
		}

		group = 'verification'

		reports {
			junitXml {
				destination = file("$reports,junitXml,destination/integration")
			}
		}
	}

	// ########################################################################
	// Build & Distribution
	// ########################################################################
	jar {
		manifest {
			attributes 'Implementation-Title' : rootProject.name + "-" + project.name, 'Implementation-Version' : version
		}
	}

	// ########################################################################
	// Reporting
	// ########################################################################
	jacoco {
		toolVersion = "0.7.1.201405082137"
	}

	jacocoTestReport {
		reports {
			xml.enabled true
		}
	}

	// ########################################################################
	// Project Initialization
	// ########################################################################

	task initProject(type: Copy) {
		description "initializes the project structure with all required packages and build files."

		from "$config.templates.path/skeleton/" + project.path.replaceAll(":", "/")
		into "$rootDir" + project.path.replaceAll(":", "/")

		if (project.getChildProjects().isEmpty()) {
			sourceSets*.java.srcDirs*.each {
				new File(it.toString() + "/" + rootProject.group.replaceAll("\\.", "/") + "/" + rootProject.name + "/" + project.name).mkdirs()
			}
			sourceSets*.resources.srcDirs*.each {
				new File(it.toString() + "/" + rootProject.group.replaceAll("\\.", "/") + "/" + rootProject.name + "/" + project.name).mkdirs()
			}
		}
	}

	// ########################################################################
	// Scaffolding of project structure
	// ########################################################################
	task scaffold(dependsOn: initProject) {
		description "Scaffolds a basic application based on the provided template structure (in dist/src/main/resources/build.groovy)"
		ext.templateBasePath = config.templates.path + "/scaffolding/" + project.path.replaceAll(":", "/") + "/"
	}

}


task initProject(type: Copy) {
	description "initializes the root project with the distribution files."
	from "$config.templates.path/skeleton/dist" 
	into "dist"
}

// ############################################################################
// Continous Integration
// ############################################################################
apply from: "$rootDir/gradle/jenkins.gradle"

// ############################################################################
// Project Cleanup
// ############################################################################
task deleteAll() << {
	description 'Removes all subprojects and the content. Don`t use this lightly!'
	delete 'bin'
	delete 'build'
	delete '.gradle'
	delete 'dist'

	rootProject.getChildProjects().each {
		delete it.key
	}
}
