// ############################################################################
// Group Definition
// ############################################################################
group = '<your group name goes here>'

// ############################################################################
// System Environment
// ############################################################################
ext.envProperties = System.getenv()

// ############################################################################
// Versioning
// ############################################################################
apply from: "$rootDir/gradle/versioning.gradle"

task writeVersionFile << {
	def versionfile = new File('version.txt')
	vesrionfile.text = "RELEASE_VERSION=" + project.version.toString()
}

// ############################################################################
// Environment
// ############################################################################
def env = project.hasProperty('env') ? project.getProperty('env') : 'local'
def config = new ConfigSlurper(env).parse(file("$rootDir/gradle/config/build.groovy").toURL())

allprojects {
	ext.config = config
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.0'
}

println '#####################################################################'
println "# Environment: 	$env"
println "# Version: 	"	+ version
println "# Group: 	"		+  group
println "# Build Date: 	" 	+ new Date()  
println '#####################################################################'

// ############################################################################
// QA & Code Analysis
// ############################################################################
apply from: "$rootDir/gradle/codeanalysis.gradle"

// ############################################################################
// Global Projects definitions
// ############################################################################
buildscript {
	repositories {
		maven {
			url "http://artifactory.ims.ch:8081/artifactory/public/"
		}
		jcenter()
		mavenCentral()
	}

	dependencies {
		classpath "com.terrafolio:gradle-jenkins-plugin:1.2.1"
		// classpath 'org.ajoberstar:gradle-git:0.9.0'
		classpath 'com.palominolabs.gradle.task:gradle-git-clone-task:0.0.2'
	}
}

allprojects {

	// ########################################################################
	// Repositories
	// ########################################################################
	repositories {
		maven {
			url config.artifactRepository.publicRepo
		}
		mavenCentral()
	}

	buildscript {
		repositories {
			maven {
				url config.artifactRepository.publicRepo
			}
			mavenCentral()
		}
	}
}

// ############################################################################
// Global Subproject definitions
// ############################################################################
subprojects {
	apply plugin: "java"
	apply plugin: "eclipse"
	apply plugin: "eclipse-wtp"
	apply plugin: "jacoco"

	version = rootProject.version
	group = rootProject.group

	// ########################################################################
	// Source Code Configuration
	// ########################################################################
	sourceCompatibility = 1.8

	// ########################################################################
	// Dependencies
	// ########################################################################
	apply from: "$rootDir/dependencies.gradle"

	// ########################################################################
	// Source Sets
	// ########################################################################
	sourceSets {
		generated {
	        java {
	            srcDir 'src/generated/java'
	        }
	    }
	}

	// ########################################################################
	// Unit & Integration Tests & & Functional Tests & JMeter Tests
	// ########################################################################
	test {
		exclude "**/*IT.*"
	}

	apply from: "$rootDir/gradle/integrationTest.gradle"

	// apply from: "$rootDir/gradle/functionalTest.gradle"

	apply from: "$rootDir/gradle/loadTest.gradle"

	// ########################################################################
	// Build & Distribution
	// ########################################################################
	jar {
		manifest {
			attributes 'Implementation-Title' : rootProject.name + "-" + project.name, 'Implementation-Version' : version
		}
	}

	// ########################################################################
	// Reporting
	// ########################################################################
	jacoco {
		toolVersion = "0.7.1.201405082137"

		// integrationTestTaskName = "integrationTest"
	}

	jacocoTestReport {
		reports {
			xml.enabled true
		}
	}

	// ########################################################################
	// Project Initialization
	// ########################################################################

	task initProject(type: Copy) {
		description "initializes the project structure with all required packages and build files."

		from "$rootDir/$config.templates.path/skeleton/" + project.path.replaceAll(":", "/")
		into "$rootDir" + project.path.replaceAll(":", "/")

		if (project.getChildProjects().isEmpty()) {
			sourceSets*.java.srcDirs*.each {
				new File(it.toString() + "/" + rootProject.group.replaceAll("\\.", "/") + "/" + rootProject.name + "/" + project.name).mkdirs()
			}
			sourceSets*.resources.srcDirs*.each {
				new File(it.toString() + "/" + rootProject.group.replaceAll("\\.", "/") + "/" + rootProject.name + "/" + project.name).mkdirs()
			}
		}
	}

	// ########################################################################
	// Scaffolding of project structure
	// ########################################################################
	task scaffold(dependsOn: initProject) {
		description "Scaffolds a basic application based on the provided template structure (in dist/src/main/resources/build.groovy)"
		ext.templateBasePath = "$rootDir/$config.templates.path" + "/scaffolding/" + project.path.replaceAll(":", "/") + "/"
	}
}

// ############################################################################
// Scaffolding
// ############################################################################
//import org.ajoberstar.gradle.git.tasks.*
task cloneRepo(type: com.palominolabs.gradle.task.git.clone.GitCloneTask) {
    def destination = file("$rootDir/$config.templates.path")
    uri = config.templates.scm
    dir = destination
    treeish = config.templates.treeish
    
    enabled = !destination.exists() //to clone only once
}

task initProject(type: Copy, dependsOn: cloneRepo) {
	description "initializes the root project with the distribution files."
	from "$rootDir/$config.templates.path/skeleton/dist" 
	into "dist"
}

task scaffold(dependsOn: cloneRepo) {
	dependsOn subprojects.scaffold
	doLast {
		if (config.os.type != 'win') {
			// the gradle job prohibits to delete the templates dir in windows.
			delete "$rootDir/$config.templates.path"
		}
	}

}

// ############################################################################
// Continous Integration
// ############################################################################
apply from: "$rootDir/gradle/jenkins.gradle"

// ############################################################################
// Project Cleanup
// ############################################################################
task deleteAll() << {
	description 'Removes all subprojects and the content. Don`t use this lightly!'
	delete 'bin'
	delete 'build'
	delete '.gradle'
	delete 'dist'

	rootProject.getChildProjects().each {
		delete it.key
	}
}
