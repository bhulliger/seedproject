// ############################################################################
// Group Definition
// ############################################################################
group = 'ch.essentialmustard'

// ############################################################################
// System Environment
// ############################################################################
ext.envProperties = System.getenv()

// ############################################################################
// Versioning
// ############################################################################
apply from: 'versioning.gradle'

// ############################################################################
// Environment
// ############################################################################
apply from: "dist/conf/$env/profile.gradle"

println '######################################################################'
println "# Environment: 	$env"
println "# Version: 	"	+ version
println "# Group: 	"		+  group
println "# BaseUrl: 	$profile.baseurl"
println "# Build Date: 	" 	+ new Date()  
println '######################################################################'

// ############################################################################
// Global Projects definitions
// ############################################################################
allprojects {

	// ########################################################################
	// Repositories
	// ########################################################################
	repositories {
		mavenCentral()
	}

	// ########################################################################
	// Project Cleanup
	// ########################################################################
	task deleteDirs << {
		delete 'src'
		delete 'bin'
		delete 'build'
		delete '.gradle'
	}
}

// ############################################################################
// Global Subproject definitions
// ############################################################################
subprojects {
	apply plugin: "java"
	apply plugin: "eclipse"
	apply plugin: "eclipse-wtp"

	version = rootProject.version
	group = rootProject.group

	// ########################################################################
	// Source Code Configuration
	// ########################################################################
	sourceCompatibility = 1.8

	// ########################################################################
	// Dependencies
	// ########################################################################
	dependencies {
		testCompile		group: 'junit', 		name: 'junit',		version: '4.+'
	}

	// ########################################################################
	// Build & Distribution
	// ########################################################################
	jar {
		manifest {
			attributes 'Implementation-Title' : rootProject.name + "-" + project.name, 'Implementation-Version' : version
		}
	}

	// ########################################################################
	// Project Initialization
	// ########################################################################
	task createDirs << {
		if (project.getChildProjects().isEmpty()) {
			sourceSets*.java.srcDirs*.each {
				new File(it.toString() + "/" + rootProject.group.replaceAll("\\.", "/") + "/" + rootProject.name + "/" + project.name).mkdirs()
			}
			sourceSets*.resources.srcDirs*.each {
				it.mkdirs()
			}
		}
	}

	task initProject(dependsOn:createDirs) << {
		println "Initializing Project: " + project.path

		def files = file("$profile.templates" + project.path.replaceAll(":", "/")).listFiles()
		files.each { File file ->
			if (file.isFile()) {
				new File(project.projectDir.toString() + "/" + file.name).text = file.text
			}
		}
	}

}
