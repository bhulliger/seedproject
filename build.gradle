// ############################################################################
// Plugins & Build Systems
// ############################################################################
buildscript {
	repositories {
		jcenter()
		mavenCentral()
	}

	dependencies {
		classpath 'com.palominolabs.gradle.task:gradle-git-clone-task:0.0.2'
	}
}

// ############################################################################
// System Environment
// ############################################################################
ext.envProperties = System.getenv()

apply from: "$rootDir/libraries.gradle"

// ############################################################################
// Versioning
// ############################################################################
apply from: "$rootDir/gradle/versioning.gradle"

task writeVersionFile << {
	def versionfile = new File('version.txt')
	vesrionfile.text = "RELEASE_VERSION=" + project.version.toString()
}

// ############################################################################
// Environment
// ############################################################################
def env = project.hasProperty('env') ? project.getProperty('env') : 'local'
def config = new ConfigSlurper(env).parse(file("$rootDir/gradle/config/build.groovy").toURL())

group = config.group

allprojects {
	ext.config = config
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.1'
}

println '#####################################################################'
println '# Environment: \t'		+ env
println '# Version: \t'			+ version
println '# Group: \t'			+  group
println '# Build Date: \t' 		+ new Date()  
println '#####################################################################'

// ############################################################################
// Global Projects definitions
// ############################################################################

allprojects {

	// ########################################################################
	// Repositories
	// ########################################################################
	repositories {
		maven {
			url config.artifactRepository.publicRepo
		}
		mavenCentral()
	}

	buildscript {
		repositories {
			maven {
				url config.artifactRepository.publicRepo
			}
			mavenCentral()
		}
	}
}

// ############################################################################
// Global Subproject definitions
// ############################################################################
subprojects {
	apply plugin: 'eclipse'
	apply plugin: 'eclipse-wtp'
	apply plugin: 'jacoco'

	version = rootProject.version
	group = rootProject.group

	// ########################################################################
	// Reporting
	// ########################################################################
	jacoco {
		toolVersion = "0.7.1.201405082137"
	}

	// ########################################################################
	// Project Initialization
	// ########################################################################
	task initProject(type: Copy) {
		description 'initializes the project structure with all required packages and build files.'

		// At least create a build.gradle and the folders for each projects (even for the ones without templates.)
		new File("$rootDir/" + project.path.replaceAll(":", "/")).mkdirs()
		
		if (project.getChildProjects().isEmpty()) {
			from "$rootDir/$config.templates.path/skeleton/" + project.path.replaceAll(':', '/')
			into "$rootDir" + project.path.replaceAll(':', '/')
		}
	}

	// ########################################################################
	// Scaffolding of project structure
	// ########################################################################
	task scaffold(dependsOn: initProject) {
		description 'Scaffolds a basic application based on the provided template structure (in dist/src/main/resources/build.groovy)'
		
		ext.templateBasePath = "${rootDir}/${config.templates.path}/scaffolding/" + project.path.replaceAll(':', '/') + '/'
	}
}

// ############################################################################
// Deployment for WAR Projects
// ############################################################################
def webProjects() {
	subprojects.findAll { subproject -> subproject.plugins.hasPlugin('war') }
}

gradle.projectsEvaluated {
	configure(webProjects()) {
		apply from: "$rootDir/gradle/web.gradle"
	}
}

// ############################################################################
// Configuration of Java Projects
// ############################################################################
def javaProjects() {
	subprojects.findAll { subproject -> subproject.plugins.hasPlugin('java') }
}

gradle.projectsEvaluated {
	configure(javaProjects()) {
		apply from: "$rootDir/gradle/qa.gradle"
		apply from: "$rootDir/gradle/java.gradle"
	}
}

// ############################################################################
// Cucumber Acceptance Tests
// ############################################################################
def cucumberProjects() {
	subprojects.findAll { subproject -> subproject.plugins.hasPlugin('com.github.samueltbrown.cucumber') }
}

gradle.projectsEvaluated {
	configure(cucumberProjects()) {
		apply from: "$rootDir/gradle/cucumber.gradle"
	}
}

// ############################################################################
// JMeter Tests
// ############################################################################
def jmeterProjects() {
	subprojects.findAll { subproject -> subproject.plugins.hasPlugin('jmeter') }
}

gradle.projectsEvaluated {
	configure(jmeterProjects()) {
		apply from: "$rootDir/gradle/jmeter.gradle"
	}
}

// ############################################################################
// Continuous Integration Jobs for Projects
// ############################################################################
def ciProjects() {
	subprojects.findAll { subproject -> subproject.plugins.hasPlugin('com.terrafolio.jenkins') }
}

gradle.projectsEvaluated {
	configure(ciProjects()) {
		apply from: "$rootDir/gradle/jenkins.gradle"
	}
}

// ############################################################################
// Initialization
// ############################################################################
task cloneRepo(type: com.palominolabs.gradle.task.git.clone.GitCloneTask) {
	description 'Checkout a copy of the project templates from a remote repository'
	group 'Initialization'

    def destination = file("$rootDir/$config.templates.path")
    uri = config.templates.scm
    dir = destination
    treeish = config.templates.treeish
    
    enabled = !destination.exists() // to clone only once
}

task initProject(type: Copy, dependsOn: cloneRepo) {

	description 'initializes the root project with the distribution files.'
	group 'Initialization'

	dependsOn subprojects.initProject

	from "$rootDir/$config.templates.path/skeleton/dist" 
	into 'dist'
}

task scaffold(dependsOn: initProject) {
	description 'Scaffolds the project based on a sample seed project. '
	group 'Initialization'

	dependsOn subprojects.scaffold

	doLast {
		if (config.os.type != 'win') {
			// the gradle job prohibits to delete the templates dir in windows.
			delete "$rootDir/$config.templates.path"
		}
	}
}

def createPackages(LinkedHashSet sourceDirectories, boolean subPackages) {
	sourceDirectories.each {
		if (subPackages) {
			new File(it.toString() + "/" + rootProject.group.replaceAll('\\.', '/').toLowerCase() + '/' + rootProject.name.toLowerCase() + '/' + project.name.toLowerCase()).mkdirs()
		} else {
			it.mkdirs()
		}
	}
} 

// ############################################################################
// Project Cleanup
// ############################################################################
task deleteAll(type: Copy, group: 'cleanup', description: 'Removes all subprojects and the content. Don`t use this lightly!') << {

	delete 'bin'
	delete 'build'
	delete '.gradle'
	delete 'dist'
	delete config.templates.path

	rootProject.getChildProjects().each {
		delete it.key
	}
}
