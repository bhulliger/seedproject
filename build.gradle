// ############################################################################
// Group Definition
// ############################################################################
group = 'ch.essentialmustard'

// ############################################################################
// System Environment
// ############################################################################
ext.envProperties = System.getenv()

// ############################################################################
// Versioning
// ############################################################################
apply from: "$rootDir/gradle/versioning.gradle"

task writeVersionFile << {
	def versionfile = new File('version.txt')
	vesrionfile.text = "RELEASE_VERSION=" + project.version.toString()
}

// ############################################################################
// Environment
// ############################################################################
def env = project.hasProperty('env') ? project.getProperty('env') : 'local'
def config = new ConfigSlurper(env).parse(file("$rootDir/gradle/config/build.groovy").toURL())

allprojects {
	ext.config = config
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.0'
}

println '#####################################################################'
println "# Environment: 	$env"
println "# Version: 	"	+ version
println "# Group: 	"		+  group
println "# Build Date: 	" 	+ new Date()  
println '#####################################################################'

// ############################################################################
// QA & Code Analysis
// ############################################################################
apply from: "$rootDir/gradle/codeanalysis.gradle"

// ############################################################################
// Global Projects definitions
// ############################################################################
buildscript {
	repositories {
		maven {
			// For GWT Gradle Plugin
            url 'https://github.com/steffenschaefer/gwt-gradle-plugin/raw/maven-repo/'
        }
        maven {
        	// Google Snapshot respository. Remove once gwt 2.7.+ is stable
        	url "https://oss.sonatype.org/content/repositories/google-snapshots/"
        }
		jcenter()
		mavenCentral()
	}

	dependencies {
		classpath "com.terrafolio:gradle-jenkins-plugin:1.2.1"
		classpath 'com.palominolabs.gradle.task:gradle-git-clone-task:0.0.2'
		classpath 'com.googlecode.flyway:flyway-gradle-plugin:2.2.1'
		classpath 'com.android.tools.build:gradle:0.12.2'
		classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.4'
	}
}

allprojects {

	// ########################################################################
	// Repositories
	// ########################################################################
	repositories {
		maven {
			url config.artifactRepository.publicRepo
		}
		mavenCentral()
	}

	buildscript {
		repositories {
			maven {
				url config.artifactRepository.publicRepo
			}
			mavenCentral()
		}
	}
}

// ############################################################################
// Global Subproject definitions
// ############################################################################
subprojects {
	apply plugin: "eclipse"
	apply plugin: "eclipse-wtp"
	apply plugin: "jacoco"

	version = rootProject.version
	group = rootProject.group

	// ########################################################################
	// Reporting
	// ########################################################################
	jacoco {
		toolVersion = "0.7.1.201405082137"
		// integrationTestTaskName = "integrationTest"
	}

	// ########################################################################
	// Project Initialization
	// ########################################################################
	task initProject(type: Copy) {
		description "initializes the project structure with all required packages and build files."

		// At least create a build.gradle and the folders for each projects (even for the ones without templates.)
		new File("$rootDir/" + project.path.replaceAll(":", "/")).mkdirs()
		
		if (project.getChildProjects().isEmpty()) {
			from "$rootDir/$config.templates.path/skeleton/" + project.path.replaceAll(":", "/")
			into "$rootDir" + project.path.replaceAll(":", "/")
		}
	}

	// ########################################################################
	// Scaffolding of project structure
	// ########################################################################
	task scaffold(dependsOn: initProject) {
		description "Scaffolds a basic application based on the provided template structure (in dist/src/main/resources/build.groovy)"
		
		ext.templateBasePath = "$rootDir/$config.templates.path" + "/scaffolding/" + project.path.replaceAll(":", "/") + "/"
	}
}

// ############################################################################
// Deployment for WAR Projects
// ############################################################################
def webProjects() {
	subprojects.findAll { subproject -> subproject.plugins.hasPlugin('war') }
}

gradle.projectsEvaluated {
	configure(webProjects()) {
		apply from: "$rootDir/gradle/cargo.gradle"
		apply from: "$rootDir/gradle/web.gradle"
	}
}

// ############################################################################
// Configuration of Java Projects
// ############################################################################
def javaProjects() {
	subprojects.findAll { subproject -> subproject.plugins.hasPlugin('java') }
}

gradle.projectsEvaluated {
	configure(javaProjects()) {
		apply from: "$rootDir/gradle/java/java.gradle"
	}
}

// ############################################################################
// Configuration of Android Projects
// ############################################################################
def androidProjects() {
	subprojects.findAll { subproject -> subproject.plugins.hasPlugin('android') }
}

gradle.projectsEvaluated {
	configure(androidProjects()) {
		apply from: "$rootDir/gradle/android/android.gradle"
	}
}

// ############################################################################
// Configuration of GWT Projects
// ############################################################################
def gwtProjects() {
	subprojects.findAll { subproject -> subproject.plugins.hasPlugin('gwt') }
}

gradle.projectsEvaluated {
	configure(gwtProjects()) {
		apply from: "$rootDir/gradle/java/gwt.gradle"
	}
}

// ############################################################################
// Continuous Integration Jobs for Projects
// ############################################################################
def ciProjects() {
	subprojects.findAll { subproject -> subproject.plugins.hasPlugin('com.terrafolio.jenkins') }
}

gradle.projectsEvaluated {
	configure(ciProjects()) {
		apply from: "$rootDir/gradle/jenkins.gradle"
	}
}

// ############################################################################
// Projects that use a database
// ############################################################################
def dbProjects() {
	subprojects.findAll { subproject -> subproject.plugins.hasPlugin('com.googlecode.flyway.gradle.FlywayPlugin') }
}

gradle.projectsEvaluated {
	configure(dbProjects()) {
		apply from: "$rootDir/gradle/flyway.gradle"
	}
}

// ############################################################################
// Scaffolding
// ############################################################################
//import org.ajoberstar.gradle.git.tasks.*
task cloneRepo(type: com.palominolabs.gradle.task.git.clone.GitCloneTask) {
	description "Checkout a copy of the project templates from a remote repository"
	group "Initialization"

    def destination = file("$rootDir/$config.templates.path")
    uri = config.templates.scm
    dir = destination
    treeish = config.templates.treeish
    
    enabled = !destination.exists() // to clone only once
}

task initProject(type: Copy, dependsOn: cloneRepo) {

	description "initializes the root project with the distribution files."
	group "Initialization"

	dependsOn subprojects.initProject

	from "$rootDir/$config.templates.path/skeleton/dist" 
	into "dist"
}

task scaffold(dependsOn: initProject) {
	description "Scaffolds the project based on a sample seed project. "
	group "Initialization"

	dependsOn subprojects.scaffold

	doLast {
		if (config.os.type != 'win') {
			// the gradle job prohibits to delete the templates dir in windows.
			delete "$rootDir/$config.templates.path"
		}
	}
}

// ############################################################################
// Project Cleanup
// ############################################################################
task deleteAll << {
	description 'Removes all subprojects and the content. Don`t use this lightly!'
	group "Initialization"

	delete 'bin'
	delete 'build'
	delete '.gradle'
	delete 'dist'
	delete config.templates.path

	rootProject.getChildProjects().each {
		delete it.key
	}
}
