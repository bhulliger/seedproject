// ############################################################################
// Configurations & Buildscript
// ############################################################################
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.2'
    }
}

configurations {
	apt
}

// ############################################################################
// Dependencies
// ############################################################################
dependencies {

	// Android
	compile 	libraries.android_support_v4
	compile 	libraries.android_annotations

	// Logging
	compile 	libraries.android_slf4j

	// Misc
	compile 	libraries.roboguice
	compile 	libraries.validation_api

	// Jackson Parsing
	compile 	libraries.jackson_core
	compile 	libraries.jackson_mapper

	// Spring Android
	compile 	libraries.spring_android_core
	compile 	libraries.spring_android_rest
	compile 	libraries.spring_android_rest_sources
	
	apt 		libraries.ims_annotation_processor
	apt files(System.getenv()['ANDROID_HOME'] + '\\platforms\\android-19\\android.jar')
}

// ############################################################################
// Android
// ############################################################################
apply plugin: "android"

android {
	compileSdkVersion  19
	buildToolsVersion  "20.0.0"

	// Default Configuration ##################################################
	defautlConfig {
		minSdkVersion 		17
		targetSdkVersion	19
	}

	// Compiler Options #######################################################
	compileOptions {
		sourceCompatibility = "1.8"
		targetCompatibility = "1.8"
	}

	// ########################################################################
	// Source Sets
	// ########################################################################
	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			res.srcDirs = ['res']
			assets.srcDir = ['assets']

			java {
				srcDirs = [ 'src/main/java', 'src/generated/java' ]
			}
		}
	}

	// ########################################################################
	// Verification
	// ########################################################################
	lintOptions {
		abortOnError false
	}

	// ########################################################################
	// Assembling
	// ########################################################################
	packagingOptions {
		exclude 'META-INF/license.txt'
		exclude 'META-INF/notice.txt'
		exclude 'META-INF/ASL2.0'
		exclude 'META-INF/LICENSE'
		exclude 'META-INF/NOTICE'
	}

	aaptOptions {
        ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }

	signingConfigs {
		release {
			storeFile file("${config.android.signing.storeFile}")
			storePassword System.properties['keypass'] ?: config.android.signing.storePassword
			keyAlias config.android.signing.keyAlias
		}
	}

	// Each buildType generates a new APK
	buildTypes {
		release {
			runProguard true
			proguardFile getDefaultProguardFile('proguard-android.txt')
			// do only sign the flavors for delivery
			signingConfig signingConfigs.release
		}
	}

	// ########################################################################
	// Product Flavors (Android) 
	// the output of the project becomes all possible combinations of Build
	// Types and Product Flavors. Each [Build Type, Product Flavor] Combination
	// is called a "Build Variant"
	// ########################################################################
	productFlavors {
		config.android.products.flavors.each { flavor ->
            config.android.products.environments.each { android_env ->
                "${flavor}_${android_env}" {
                	applicationId group + "." + project.name + "_${flavor}_${android_env}"
                }
            }
        }
	}
}

// ############################################################################
// Project Initialization
// ############################################################################
task initProject(type: Copy) {

	if (project.getChildProjects().isEmpty()) {
		android.sourceSets.main.java.srcDirs*.each {
			new File(it.toString() + "/" + rootProject.group.replaceAll("\\.", "/") + "/" + rootProject.name + "/" + project.name).mkdirs()
		}
		android.sourceSets.main.res.srcDirs*.each {
			it.mkdirs()
		}

		android.sourceSets.main.assets.srcDirs*.each {
			it.mkdirs()
		}
	}
}