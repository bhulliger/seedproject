// ############################################################################
// check if username and password are provided
// ############################################################################

task checkCredentials << {
    println "checking for jenkins credentials"

    def user = System.properties['jenkinsUser'] ?: config.jenkins.username
    def password = System.properties['jenkinsPassword'] ?: config.jenkins.password

    if (!user?.trim() || !password?.trim()) {
        def errormessage = "Please provide your jenkins username and pasword as arguments: -DjenkinsUser=<username> -DjenkinsPassword=<password>"

        throw new InvalidUserDataException(errormessage);
    } 

    println "Updating jenkins with user: " + user
}

updateJenkinsItems.dependsOn checkCredentials
deleteJenkinsItems.dependsOn checkCredentials

jenkins {
    servers {
        testing {
            url config.jenkins.url
            secure true
            username System.properties['jenkinsUser'] ?: config.jenkins.username
            password System.properties['jenkinsPassword'] ?: config.jenkins.password
        }
    }

    defaultServer servers.testing

    // ########################################################################
    // View for the project 
    // ########################################################################
    views {
        
        dsl {

            view(type: "ListView") {
                name "${rootProject.name}"
                description "Build jobs for the project ${rootProject.name}"

                configure { view ->

                    view / 'includeRegex' << "${rootProject.name}-[a-zA-Z\\-_]+"
                }

                columns {
                    buildButton()
                    status()
                    weather()
                    name()
                    lastSuccess()
                    lastFailure()
                    lastDuration()
                }
            }

                
            view (type: "BuildPipelineView") {
                name "${rootProject.name}-pipeline"
                description "Build Pipeline for the project ${rootProject.name}"
                selectedJob "${rootProject.name}-initial"               
            }
        }
    }

    // ########################################################################
    // Templates
    // ########################################################################
    templates {
        base {
            dsl {
                // logRotator(daysToKeep,numToKeep,artifactDaysToKeep,artifactNumToKeep)
                logRotator (-1,10,-1,5)

                authorization {
                    permissionAll "${config.jenkins.authorization.permission}"
                }

                if (config.os.type != 'win') {
                    steps {
                        shell('chmod +x $WORKSPACE/gradlew')
                    }
                }

                configure { project ->

                    // mask passwords
                    (project / buildWrappers).appendNode("com.michelin.cio.hudson.plugins.maskpasswords.MaskPasswordsBuildWrapper")

                    // build name setter
                    (project / buildWrappers).appendNode("org.jenkinsci.plugins.buildnamesetter.BuildNameSetter", [ 'plugin' : 'build-name-setter@1.3']) << {
                        template "${rootProject.name}" + '#${ENV,var="SOURCE_BUILD_NUMBER"}'
                    }
                }

                
                scm {
                    if (config.scm.type == 'git') {
                        git( "${config.scm.url}" ) { git ->
                            (git / 'userRemoteConfigs' / 'hudson.plugins.git.UserRemoteConfig' / 'credentialsId') << config.jenkins.scm.credentialsId
                        }
                    } else if (config.scm.type == 'svn') {
                        svn("${config.scm.url}") { svn ->
                            (svn / 'locations' / 'hudson.scm.SubversionSCM_-ModuleLocation' / 'credentialsId') << config.jenkins.scm.credentialsId
                        }
                    }

                }

            }
        }
        // Template for all tasks in the build phase (except the initial job - it needs to be configured separately.)
        commit {
            dsl {
                using "base"

                configure { project -> 
                    // pipeline
                    (project / 'properties').appendNode("se.diabol.jenkins.pipeline.PipelineProperty", [ 'plugin' : 'delivery-pipeline-plugin@0.8.2']) << {
                        stageName 'COMMIT'
                    }
                }

                scm {
                    cloneWorkspace("${rootProject.name}-initial", 'Successful')
                }
            }

        }

        // Acceptance Stage
        acceptance {
            dsl {
                using "base"

                configure { project -> 

                    // pipeline
                    (project / 'properties').appendNode("se.diabol.jenkins.pipeline.PipelineProperty", [ 'plugin' : 'delivery-pipeline-plugin@0.8.2']) << {
                        stageName 'ACCEPTANCE'
                    }
                }

                scm {
                    if (config.scm.type == 'git') {
                        git( "${config.scm.url}", '${COMMIT}') { git ->
                            (git / 'userRemoteConfigs' / 'hudson.plugins.git.UserRemoteConfig' / 'credentialsId') << config.jenkins.scm.credentialsId
                        }
                    } else if (config.scm.type == 'svn') {

                        svn("${config.scm.url}" + '@${SVN_REVISION}' ) { svn ->
                            (svn / 'locations' / 'hudson.scm.SubversionSCM_-ModuleLocation' / 'credentialsId') << config.jenkins.scm.credentialsId
                        }
                    }
                    
                }
            }
        }

    }

    // ########################################################################
    // Jobs 
    // ########################################################################
    jobs {

        // ####################################################################
        // Step 0: Creation Job. Inits the project and scaffolds the data.
        // ####################################################################


        // ####################################################################
        // Step 1.1: Initial job, triggers after every checking (commit stage)
        // ####################################################################
        "${rootProject.name}-initial" {
            dsl {

                using "base"

                description 'Checks for Changes in the SCM, compiles the code and runs the unit tests (not integration tests though). <br/> Goal: Rapid Feedback (<5mins), Run on every checkin, fix broken builds.'

                triggers {
                    // check for scm updates every 5 minutes
                    scm 'H/5 * * * *'
                }

                configure { project ->
                    // pipeline
                    (project / 'properties').appendNode("se.diabol.jenkins.pipeline.PipelineProperty", [ 'plugin' : 'delivery-pipeline-plugin@0.8.2']) << {
                        stageName 'COMMIT'
                    }
                    
                    // build name setter
                    (project / buildWrappers).appendNode("org.jenkinsci.plugins.buildnamesetter.BuildNameSetter", [ 'plugin' : 'build-name-setter@1.3']) << {
                        template "${rootProject.name}" + '#${BUILD_NUMBER}'
                    }

                    // mailer
                    (project / publishers).appendNode("hudson.tasks.Mailer", [ 'plugin' : 'mailer@1.9']) << {
                        recipients config.jenkins.notifications
                        dontNotifyEveryUnstableBuild false
                        sendToIndividuals true
                    }
                }
                
                steps {
                    gradle ('clean test', '', true) { node ->
                        node / fromRootBuildScriptDir << true
                    }

                }

                publishers {
                    // Archive for Clone Workspace SCM
                    publishCloneWorkspace '**/*', '', 'Successful', 'TAR', false

                    // Publish JUnit test result report
                    archiveJunit '**/test-results/TEST-*.xml'

                    // Record JaCoCo coverage Report
                    jacocoCodeCoverage {
                        execPattern '**/build/jacoco/test.exec'
                        classPattern '**/src/main/java'
                        maximumInstructionCoverage '100'
                        maximumBranchCoverage '70'
                        maximumComplexityCoverage '70'
                        maximumLineCoverage '70'
                        maximumMethodCoverage '70'
                        maximumClassCoverage '70'

                    }

                    // Trigger parameterized build on other projects
                    downstreamParameterized {
                        trigger ("${rootProject.name}-integration_tests", 'SUCCESS', true, ['buildStepFailure': 'FAILURE', 'failure' : 'FAILURE', 'unstable' : 'UNSTABLE']) {
                            currentBuild() // Current Build Parameters
                            predefinedProps(['SOUCE_BUILD_NUMBER':'${BUILD_NUMBER}', 'SVN_REVISION' : '${SVN_REVISION}', 'GIT_COMMIT' : '${GIT_COMMIT}'])
                            setTriggerWithNoParameters false
                        }
                     }

                }
            }
        }

        // ####################################################################
        // Step 1.2: Integration Tests (commit stage)
        // ####################################################################
        "${rootProject.name}-integration_tests" {
            dsl {

                using "commit"

                description 'Runs the integration tests (long lasting unittests, tests with external resources, tests that are hard to maintain).'

                steps {
                    gradle ('integrationTest', '', true) { node -> 
                        node / fromRootBuildScriptDir << true
                    }

                }

                publishers {
                    // Archive for Clone Workspace SCM
                    publishCloneWorkspace '**/*', '', 'Successful', 'TAR', false

                    // Trigger parameterized build on other projects
                    downstreamParameterized {
                        trigger ("${rootProject.name}-code_analysis", 'SUCCESS', true, ['buildStepFailure': 'FAILURE', 'failure' : 'FAILURE', 'unstable' : 'UNSTABLE']) {
                            currentBuild() // Current Build Parameters
                            predefinedProps(['SOUCE_BUILD_NUMBER':'${BUILD_NUMBER}', 'SVN_REVISION' : '${SVN_REVISION}', 'GIT_COMMIT' : '${GIT_COMMIT}'])
                            setTriggerWithNoParameters false
                        }
                    }

                }

            }
        }

        // ####################################################################
        // Step 1.3: Code Analysis (commit stage)
        // ####################################################################
        "${rootProject.name}-code_analysis" {
            dsl {

                using "commit"

                description "Perform code health check. Fail build for low quality, Record progress over time. (<a href='${config.jenkins.url}/dashboard/index/GROUP:NAME'>Sonar</a>)"

                steps {
                    gradle ('check sonarRunner', '', true) { node -> 
                        node / fromRootBuildScriptDir << true
                    }
                }

                publishers {

                    // Trigger parameterized build on other projects
                    downstreamParameterized {
                        trigger ("${rootProject.name}-publish", 'SUCCESS', true, ['buildStepFailure': 'FAILURE', 'failure' : 'FAILURE', 'unstable' : 'UNSTABLE']) {
                            currentBuild() // Current Build Parameters
                            predefinedProps(['SOUCE_BUILD_NUMBER':'${SOURCE_BUILD_NUMBER}', 'SVN_REVISION' : '${SVN_REVISION}', 'GIT_COMMIT' : '${GIT_COMMIT}'])
                            setTriggerWithNoParameters false
                        }
                    }

                }

            }
        }

        // ####################################################################
        // Step 1.4: Assemble & Publish
        // ####################################################################
        "${rootProject.name}-publish" {
            dsl {

                def isAndroid = project.name.contains('android')

                using "commit"

                configure { project -> 

                    project.name = 'matrix-project'

                    project / axes / 'hudson.matrix.TextAxis' {
                        name 'Umgebung'
                        values {

                            // combine flavors for android
                            if (isAndroid) {

                                config.android.products.flavors.each { flavor ->
                                    config.android.products.environments.each { android_env ->
                                        string "${flavor}_${android_env}"
                                    }
                                }

                            // axes for web apps
                            } else {

                                config.jenkins.axes.each {
                                    string it
                                }
                            }

                        } 
                    }
                }


                description 'Assembles the distribution environmental configuration adn publishes it to the remote repository. Includes the Build information. Choose versioning strategy.'

                steps {

                    def task = project.name.contains('android') ? 'assemble${env} publish' : 'assemble publish'

                    gradle (task, '-Penv=${env}', true) { node -> 
                        node / fromRootBuildScriptDir << true
                    }    
                }

                publishers {

                    // Trigger parameterized build on other projects
                    downstreamParameterized {
                        trigger ("${rootProject.name}-deploy_integration", 'SUCCESS', true, ['buildStepFailure': 'FAILURE', 'failure' : 'FAILURE', 'unstable' : 'UNSTABLE']) {
                            currentBuild() // Current Build Parameters
                            predefinedProps(['SOUCE_BUILD_NUMBER':'${BUILD_NUMBER}', 'SVN_REVISION' : '${SVN_REVISION}', 'GIT_COMMIT' : '${GIT_COMMIT}'])
                            setTriggerWithNoParameters false
                        }
                    }

                }

            }
        }

        // ####################################################################
        // Step 2.1: Deploy Integration (acceptance stage)
        // ####################################################################
        "${rootProject.name}-deploy_integration" {
            dsl {

                using "acceptance"

                description 'Installs the binaries on the integration server <a href="${config.environments.integration.server.url}">${config.environments.integration.server.url}</a>'

                steps {
                    gradle ('cargoDeploy', '-Penv=integration', true) { node -> 
                        node / fromRootBuildScriptDir << true
                    }

                }

                publishers {

                    // Trigger parameterized build on other projects
                    downstreamParameterized {
                        trigger ("${rootProject.name}-acceptance_tests, ${rootProject.name}-performance_tests", 'SUCCESS', true, ['buildStepFailure': 'FAILURE', 'failure' : 'FAILURE', 'unstable' : 'UNSTABLE']) {
                            currentBuild() // Current Build Parameters
                            predefinedProps(['SOUCE_BUILD_NUMBER':'${BUILD_NUMBER}', 'SVN_REVISION' : '${SVN_REVISION}', 'GIT_COMMIT' : '${GIT_COMMIT}'])
                            setTriggerWithNoParameters false
                        }
                    }

                }

            }
        }

        // ####################################################################
        // Step 6: Acceptance Tests (acceptance stage)
        // ####################################################################
        "${rootProject.name}-acceptance_tests" {
            dsl {

                using "acceptance"

                description 'Runs the acceptance tests (all UI permutations, important use cases, different envs) on the integration server.'

                steps {
                    gradle ('functionalTest', '-Penv=integration', true) { node -> 
                        node / fromRootBuildScriptDir << true
                    }
                }

                publishers {

                    // Trigger parameterized build on other projects
                    downstreamParameterized {
                        trigger ("${rootProject.name}-deploy_test", 'SUCCESS', true, ['buildStepFailure': 'FAILURE', 'failure' : 'FAILURE', 'unstable' : 'UNSTABLE']) {
                            currentBuild() // Current Build Parameters
                            predefinedProps(['SOUCE_BUILD_NUMBER':'${BUILD_NUMBER}', 'SVN_REVISION' : '${SVN_REVISION}', 'GIT_COMMIT' : '${GIT_COMMIT}'])
                            setTriggerWithNoParameters false
                        }
                    }

                }

            }
        }

        // ####################################################################
        // Step 7: Performance Tests (acceptance stage)
        // ####################################################################
        "${rootProject.name}-performance_tests" {
            dsl {

                using "acceptance"

                description 'Runs the performance tests (jmeter) on the integration server.'

                steps {
                    gradle ('jmeterRun', '-Penv=integration', true) { node -> 
                        node / fromRootBuildScriptDir << true
                    }
                }
            }
        }

        // ####################################################################
        // Step 8: Deploy to Test (trigger manually)
        // ####################################################################
        "${rootProject.name}-deploy_test" {
            dsl {

                using "base"

                description 'Installs the project on the test server <a href="${config.environments.test.server.url}">${config.environments.test.server.url}</a>'

                configure { project -> 

                    // pipeline
                    (project / 'properties').appendNode("se.diabol.jenkins.pipeline.PipelineProperty", [ 'plugin' : 'delivery-pipeline-plugin@0.8.2']) << {
                        stageName 'UAT'
                    }

                    // ########################################################
                    // Git Publisher (publish tag)
                    // ########################################################
                    if (config.scm.type == 'git') {
                        (project/publishers/'hudson.plugins.git.GitPublisher') << {
                            configVersion 2
                            pushMerge true
                            pushOnlyIfSuccess true
                            tagsToPush {
                                'hudson.plugins.git.GitPublisher_-TagToPush' {
                                    targetRepoName "RepoName"
                                    tagName '${env[\'RELEASE_VERSION\']}'
                                    tagMessage 'Release Tag done by CI.'
                                    createTag true
                                    updateTag true
                                }
                            }
                        }
                        
                    }
                    // ########################################################
                    // SVN Publisher (publish tag)
                    // ########################################################
                    if (config.scm.type == 'svn') {
                        (project/publishers/'hudson.plugins.svn__tag.SvnTagPublisher') << {
                            tagBaseURL config.scm.tagBase + '/${env[\'RELEASE_VERSION\']}'
                            tagComment 'Release Tag done by CI.'
                            tagDeleteComment 'Tag deleted by CI.'
                        }
                        
                    }

                    // ########################################################
                    // Build other projects (manual step)
                    // ########################################################
                    (project/publishers/'au.com.centrumsystems.hudson.plugin.buildpipeline.trigger.BuildPipelineTrigger') << {
                        configs {
                            'hudson.plugins.parameterizedtrigger.PredefinedBuildParameters' {
                                properties 'SOUCE_BUILD_NUMBER=${SOURCE_BUILD_NUMBER}'
                            }
                        }
                        downstreamProjectNames "${rootProject.name}-deploy_production"
                    }


                }

                scm {
                    if (config.scm.type == 'git') {
                        git( "${config.scm.url}", '${GIT_COMMIT}') { git ->
                            (git / 'userRemoteConfigs' / 'hudson.plugins.git.UserRemoteConfig' / 'credentialsId') << config.jenkins.scm.credentialsId
                            (git / 'userRemoteConfigs' / 'hudson.plugins.git.UserRemoteConfig' / 'name') << 'RepoName'
                        }
                    } else if (config.scm.type == 'svn')  {
                        svn("${config.scm.url}" + '@${SVN_REVISION}' ) { svn ->
                            (svn / 'locations' / 'hudson.scm.SubversionSCM_-ModuleLocation' / 'credentialsId') << config.jenkins.scm.credentialsId
                        }
                    }
                }

                steps {
                    gradle ('writeVersionFile cargoDeployRemote', '-Penv=test', true) { node -> 
                        node / fromRootBuildScriptDir << true
                    }
                }
            }
        }

        // ####################################################################
        // Step 9: Deploy to Prod (trigger manually)
        // ####################################################################
        "${rootProject.name}-deploy_production" {
            dsl {

                using "base"

                description 'Installs the project on the prod server <a href="${config.environments.test.server.url}">${config.environments.test.server.url}</a>'

                scm {
                    if (config.scm.type == 'git') {
                        git( "${config.scm.url}") { git ->
                            (git / 'userRemoteConfigs' / 'hudson.plugins.git.UserRemoteConfig' / 'refspec') << 'refs/tags/${env[\'RELEASE_VERSION\']}'
                            (git / 'userRemoteConfigs' / 'hudson.plugins.git.UserRemoteConfig' / 'credentialsId') << config.jenkins.scm.credentialsId
                        }
                    } else if (config.scm.type == 'svn') {
                        svn("${config.scm.url}" + '@${SVN_REVISION}' ) { svn ->
                            (svn / 'locations' / 'hudson.scm.SubversionSCM_-ModuleLocation' / 'credentialsId') << config.jenkins.scm.credentialsId
                        }

                    }
                    
                }

                configure { project -> 

                    // pipeline
                    (project / 'properties').appendNode("se.diabol.jenkins.pipeline.PipelineProperty", [ 'plugin' : 'delivery-pipeline-plugin@0.8.2']) << {
                        stageName 'PROD'
                    }
                }

                steps {
                    gradle ('cargoDeployRemote', '-Penv=prod', true) { node -> 
                        node / fromRootBuildScriptDir << true
                    }

                }

                publishers {

                }

            }
        }
         
    }

    
}
