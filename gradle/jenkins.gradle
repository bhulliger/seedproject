apply plugin: "com.terrafolio.jenkins"

jenkins {
    servers {
        testing {
            url config.jenkins.url
            secure true
            username config.jenkins.username
            password config.jenkins.password
        }
    }

    defaultServer servers.testing

    // ########################################################################
    // View for the project 
    // ########################################################################
    views {

        dsl {
            view {
                name "${rootProject.name}"
                description "Build Queue for the project ${rootProject.name}"
                
                /* TODO: doesn't work. 
                jobs {
                    regex "${rootProject.name}-[a-zA-Z\\-_]+"   
                }
                */

                columns {
                    buildButton()
                    lastDuration()
                    lastFailure()
                    lastSuccess()
                    name()
                    status()
                    weather()
                }
            } 
        }
        
    }

    // ########################################################################
    // Templates
    // ########################################################################
    templates {
        base {
            dsl {
                // logRotator(daysToKeep,numToKeep,artifactDaysToKeep,artifactNumToKeep)
                logRotator (-1,10,-1,5)

                authorization {
                    permissionAll "${config.jenkins.authorization.permission}"
                }

                configure { project ->

                    // mask passwords
                    (project / buildWrappers).appendNode("com.michelin.cio.hudson.plugins.maskpasswords.MaskPasswordsBuildWrapper")

                }

            }
        }
        // Template for all tasks in the build phase (except the initial job - it needs to be configured separately.)
        commit {
            dsl {
                using "base"

                configure { project -> 
                    // pipeline
                    (project / 'properties').appendNode("se.diabol.jenkins.pipeline.PipelineProperty", [ 'plugin' : 'delivery-pipeline-plugin@0.8.2']) << {
                        stageName 'COMMIT'
                    }
                    // build name setter
                    (project / buildWrappers).appendNode("org.jenkinsci.plugins.buildnamesetter.BuildNameSetter", [ 'plugin' : 'build-name-setter@1.3']) << {
                        template "${rootProject.name}" + '#${ENV,var="SOURCE_BUILD_NUMBER"}'
                    }
                }

                scm {
                    cloneWorkspace("${rootProject.name}-initial", 'Successful')
                }
            }

        }
        // Acceptance Stage
        acceptance {
            dsl {
                using "base"

                configure { project -> 

                    // pipeline
                    (project / 'properties').appendNode("se.diabol.jenkins.pipeline.PipelineProperty", [ 'plugin' : 'delivery-pipeline-plugin@0.8.2']) << {
                        stageName 'ACCEPTANCE'
                    }
                    // build name setter
                    (project / buildWrappers).appendNode("org.jenkinsci.plugins.buildnamesetter.BuildNameSetter", [ 'plugin' : 'build-name-setter@1.3']) << {
                        template "${rootProject.name}" + '#${ENV,var="SOURCE_BUILD_NUMBER"}'
                    }
                }
            }
        }

        // Template for jobs in the 'QA' Phase
        uat {
            dsl {
                using "base"

                configure { project -> 

                    // pipeline
                    (project / 'properties').appendNode("se.diabol.jenkins.pipeline.PipelineProperty", [ 'plugin' : 'delivery-pipeline-plugin@0.8.2']) << {
                        stageName 'UAT'
                    }
                    // build name setter
                    (project / buildWrappers).appendNode("org.jenkinsci.plugins.buildnamesetter.BuildNameSetter", [ 'plugin' : 'build-name-setter@1.3']) << {
                        template "${rootProject.name}" + '#${ENV,var="SOURCE_BUILD_NUMBER"}'
                    }
                }
            }
        }

        // Template for jobs in the Production phase
        prod {
            dsl {
                using "base"

                configure { project -> 

                    // pipeline
                    (project / 'properties').appendNode("se.diabol.jenkins.pipeline.PipelineProperty", [ 'plugin' : 'delivery-pipeline-plugin@0.8.2']) << {
                        stageName 'PROD'
                    }
                    // build name setter
                    (project / buildWrappers).appendNode("org.jenkinsci.plugins.buildnamesetter.BuildNameSetter", [ 'plugin' : 'build-name-setter@1.3']) << {
                        template "${rootProject.name}" + '#${ENV,var="SOURCE_BUILD_NUMBER"}'
                    }
                }
            }
        }
    }

    // ########################################################################
    // Jobs 
    // ########################################################################
    jobs {
        // ####################################################################
        // Step 1.1: Initial job, triggers after every checking (commit stage)
        // ####################################################################
        "${rootProject.name}-initial" {
            dsl {

                using "base"

                description 'Checks for Changes in the SCM, compiles the code and runs the unit tests (not integration tests though). <br/> Goal: Rapid Feedback (<5mins), Run on every checkin, fix broken builds.'

                scm {
                    git( "${config.scm.git.url}" )
                    // svn( "${config.scm.svn.url}" )
                }

                triggers {
                    // check for scm updates every 5 minutes
                    scm 'H/5 * * * *'
                }

                configure { project ->
                    // pipeline
                    (project / 'properties').appendNode("se.diabol.jenkins.pipeline.PipelineProperty", [ 'plugin' : 'delivery-pipeline-plugin@0.8.2']) << {
                        stageName 'COMMIT'
                    }
                    
                    // build name setter
                    (project / buildWrappers).appendNode("org.jenkinsci.plugins.buildnamesetter.BuildNameSetter", [ 'plugin' : 'build-name-setter@1.3']) << {
                        template "${rootProject.name}" + '#${BUILD_NUMBER}'
                    }

                    // mailer
                    (project / publishers).appendNode("hudson.tasks.Mailer", [ 'plugin' : 'mailer@1.9']) << {
                        recipients config.jenkins.notifications
                        dontNotifyEveryUnstableBuild false
                        sendToIndividuals true
                    }
                }
                
                steps {
                    gradle ('clean test', '', true) {
                        rootBuildScriptDir "true"
                        fromRootBuildScriptDir true
                    }

                }

                publishers {
                    // Archive for Clone Workspace SCM
                    publishCloneWorkspace '**/*', '', 'Successful', 'TAR', false

                    // Publish JUnit test result report
                    archiveJunit '**/test-results/TEST-*.xml'

                    // Record JaCoCo coverage Report
                    jacocoCodeCoverage {
                        execPattern '**/build/jacoco/test.exec'
                        classPattern '**/src/main/java'
                        maximumInstructionCoverage '100'
                        maximumBranchCoverage '70'
                        maximumComplexityCoverage '70'
                        maximumLineCoverage '70'
                        maximumMethodCoverage '70'
                        maximumClassCoverage '70'

                    }

                    // Email Notification
                    extendedEmail 'bhu@ims.ch'

                    // Trigger parameterized build on other projects
                    downstreamParameterized {
                        trigger ("${rootProject.name}-integration_tests", 'SUCCESS', true, ['buildStepFailure': 'FAILURE', 'failure' : 'FAILURE', 'unstable' : 'UNSTABLE']) {
                            currentBuild() // Current Build Parameters
                            predefinedProps(['SOUCE_BUILD_NUMBER':'${BUILD_NUMBER}', 'SVN_REVISION' : '${SVN_REVISION}'])
                            setTriggerWithNoParameters false
                        }
                     }

                }
            }
            
        }

        // ####################################################################
        // Step 1.2: Integration Tests (commit stage)
        // ####################################################################
        "${rootProject.name}-integration_tests" {
            dsl {

                using "commit"

                description 'Runs the integration tests (long lasting unittests, tests with external resources, tests that are hard to maintain).'

                steps {
                    gradle ('integrationTest', '', true)  {
                        rootBuildScriptDir true
                        fromRootBuildScriptDir true
                    }

                }

                publishers {

                    // Trigger parameterized build on other projects
                    downstreamParameterized {
                        trigger ("${rootProject.name}-code_analysis", 'SUCCESS', true, ['buildStepFailure': 'FAILURE', 'failure' : 'FAILURE', 'unstable' : 'UNSTABLE']) {
                            currentBuild() // Current Build Parameters
                            predefinedProps(['SOUCE_BUILD_NUMBER':'${BUILD_NUMBER}', 'SVN_REVISION' : '${SVN_REVISION}'])
                            setTriggerWithNoParameters false
                        }
                    }

                }

            }
        }

        // ####################################################################
        // Step 1.3: Code Analysis (commit stage)
        // ####################################################################
        "${rootProject.name}-code_analysis" {
            dsl {

                using "commit"

                description 'Perform code health check. Fail build for low quality, Record progress over time. (<a href="${config.jenkins.url}/dashboard/index/GROUP:NAME">Sonar</a>)'

                steps {
                    gradle ('sonarRunner', '', true)  {
                        rootBuildScriptDir true
                        fromRootBuildScriptDir true
                    }

                }

                publishers {

                    // Trigger parameterized build on other projects
                    downstreamParameterized {
                        trigger ("${rootProject.name}-assemble", 'SUCCESS', true, ['buildStepFailure': 'FAILURE', 'failure' : 'FAILURE', 'unstable' : 'UNSTABLE']) {
                            currentBuild() // Current Build Parameters
                            predefinedProps(['SOUCE_BUILD_NUMBER':'${BUILD_NUMBER}', 'SVN_REVISION' : '${SVN_REVISION}'])
                            setTriggerWithNoParameters false
                        }
                    }

                }

            }
        }

        // ####################################################################
        // Step 1.4: Assemble
        // ####################################################################
        "${rootProject.name}-assemble" {
            dsl {

                using "commit"

                description 'Assembles the distribution without environmental configuration. Includes the Build information. Choose versioning strategy.'

                steps {
                    gradle ('assemble', '-Penv=${env}', true)  {
                        rootBuildScriptDir true
                        fromRootBuildScriptDir true
                    }

                }

                publishers {

                    // Trigger parameterized build on other projects
                    downstreamParameterized {
                        trigger ("${rootProject.name}-publish", 'SUCCESS', true, ['buildStepFailure': 'FAILURE', 'failure' : 'FAILURE', 'unstable' : 'UNSTABLE']) {
                            currentBuild() // Current Build Parameters
                            predefinedProps(['SOUCE_BUILD_NUMBER':'${BUILD_NUMBER}', 'SVN_REVISION' : '${SVN_REVISION}'])
                            setTriggerWithNoParameters false
                        }
                    }

                }

            }
        }

        // ####################################################################
        // Step 1.5: Publish
        // ####################################################################
        "${rootProject.name}-publish" {
            dsl {

                using "commit"

                description 'Version artifact(s). Use binary repository, publish once, then reuse.'

                steps {
                    gradle ('publish', '-Penv=${env}', true)  {
                        rootBuildScriptDir true
                        fromRootBuildScriptDir true
                    }

                }

                publishers {

                    // Trigger parameterized build on other projects
                    downstreamParameterized {
                        trigger ("${rootProject.name}-deploy_binaries", 'SUCCESS', true, ['buildStepFailure': 'FAILURE', 'failure' : 'FAILURE', 'unstable' : 'UNSTABLE']) {
                            currentBuild() // Current Build Parameters
                            predefinedProps(['SOUCE_BUILD_NUMBER':'${BUILD_NUMBER}', 'SVN_REVISION' : '${SVN_REVISION}'])
                            setTriggerWithNoParameters false
                        }
                    }

                }

            }
        }

        // ####################################################################
        // Step 2.1: Deploy Integration (acceptance stage)
        // ####################################################################
        "${rootProject.name}-deploy_binaries" {
            dsl {

                using "acceptance"

                description 'Installs the binaries on the integration server <a href="${config.environments.integration.server.url}">${config.environments.integration.server.url}</a>'

                scm {
                    svn("${config.scm.git.url}" + '@${SVN_REVISION}')
                }

                steps {
                    gradle ('deploy', '-Penv=integration', true)  {
                        rootBuildScriptDir true
                        fromRootBuildScriptDir true
                    }

                }

                publishers {

                    // Trigger parameterized build on other projects
                    downstreamParameterized {
                        trigger ("${rootProject.name}-acceptance_tests", 'SUCCESS', true, ['buildStepFailure': 'FAILURE', 'failure' : 'FAILURE', 'unstable' : 'UNSTABLE']) {
                            currentBuild() // Current Build Parameters
                            predefinedProps(['SOUCE_BUILD_NUMBER':'${BUILD_NUMBER}', 'SVN_REVISION' : '${SVN_REVISION}'])
                            setTriggerWithNoParameters false
                        }
                    }

                }

            }
        }

        // ####################################################################
        // Step 6: Acceptance Tests (acceptance stage)
        // ####################################################################
        "${rootProject.name}-acceptance_tests" {
            dsl {

                using "acceptance"

                description 'Runs the acceptance tests (all UI permutations, important use cases, different envs) on the integration server.'

                steps {
                    gradle ('functionalTest', '-Penv=integration', true)  {
                        rootBuildScriptDir true
                        fromRootBuildScriptDir true
                    }
                }

                publishers {

                    // Trigger parameterized build on other projects
                    downstreamParameterized {
                        trigger ("${rootProject.name}-performance_test", 'SUCCESS', true, ['buildStepFailure': 'FAILURE', 'failure' : 'FAILURE', 'unstable' : 'UNSTABLE']) {
                            currentBuild() // Current Build Parameters
                            predefinedProps(['SOUCE_BUILD_NUMBER':'${BUILD_NUMBER}', 'SVN_REVISION' : '${SVN_REVISION}'])
                            setTriggerWithNoParameters false
                        }
                    }

                }

            }
        }

        // ####################################################################
        // Step 7: Performance Tests (acceptance stage)
        // ####################################################################
        "${rootProject.name}-performance_tests" {
            dsl {

                using "acceptance"

                description 'Runs the performance tests (jmeter) on the integration server.'

                steps {
                    // TODO
                }

                publishers {

                    // Trigger parameterized build on other projects
                    downstreamParameterized {
                        trigger ("${rootProject.name}-deploy_test", 'SUCCESS', true, ['buildStepFailure': 'FAILURE', 'failure' : 'FAILURE', 'unstable' : 'UNSTABLE']) {
                            currentBuild() // Current Build Parameters
                            predefinedProps(['SOUCE_BUILD_NUMBER':'${BUILD_NUMBER}', 'SVN_REVISION' : '${SVN_REVISION}'])
                            setTriggerWithNoParameters false
                        }
                    }

                }

            }
        }

        // ####################################################################
        // Step 8: Deploy to Test (trigger manually)
        // ####################################################################
        "${rootProject.name}-deploy_test" {
            dsl {

                using "uat"

                description 'Installs the project on the test server <a href="${config.environments.test.server.url}">${config.environments.test.server.url}</a>'

                scm {
                    svn("${config.scm.git.url}" + '@${SVN_REVISION}')
                }

                steps {
                    gradle ('writeVersionFile cargoDeployRemote', '-Penv=test', true)  {
                        rootBuildScriptDir true
                        fromRootBuildScriptDir true
                    }

                }

                publishers {

                    // Trigger parameterized build on other projects
                    downstreamParameterized {
                        trigger ("${rootProject.name}-deploy_production", 'SUCCESS', true, ['buildStepFailure': 'FAILURE', 'failure' : 'FAILURE', 'unstable' : 'UNSTABLE']) {
                            currentBuild() // Current Build Parameters
                            predefinedProps(['SOUCE_BUILD_NUMBER':'${BUILD_NUMBER}', 'SVN_REVISION' : '${SVN_REVISION}'])
                            setTriggerWithNoParameters false
                        }
                    }

                }

            }
        }

        // ####################################################################
        // Step 9: Deploy to Prod (trigger manually)
        // ####################################################################
        "${rootProject.name}-deploy_production" {
            dsl {

                using "prod"

                description 'Installs the project on the prod server <a href="${config.environments.test.server.url}">${config.environments.test.server.url}</a>'

                scm {
                    svn("${config.scm.git.url}" + '@${SVN_REVISION}')
                }

                steps {
                    gradle ('autoinstall', '-Penv=prod', true)  {
                        rootBuildScriptDir true
                        fromRootBuildScriptDir true
                    }

                }

                publishers {

                }

            }
        }
         
    }

    
}
