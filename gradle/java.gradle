// ############################################################################
// Source Code Configuration
// ############################################################################
sourceCompatibility = 1.8

sourceSets {
	generated
	integTest
}

// ############################################################################
// Dependencies
// ############################################################################
dependencies {

	// Testing
	testCompile libraries.junit
	testCompile libraries.mockito_all

	// Integration Tests
	integTestCompile libraries.junit

	// Utils
	compile 	libraries.lombok
}

// Integration Tests ##########################################################
task integrationTest(type: Test) {
	description 'Run the integration tests (long running tests and tests with external resources)'

	group = 'verification'

	testClassesDir = sourceSets.integTest.output.classesDir
	classpath += sourceSets.integTest.runtimeClasspath

	reports {
		junitXml {
			destination = file("$reportsDir/integTests")
		}
	}
}

// ############################################################################
// Source Code generators (AnnotationProcessors)
// ############################################################################

compileJava {
	doFirst {
		options.compilerArgs = [
			'-s', sourceSets.generated.java.srcDirs.iterator().next()
		]
	}
}

// ############################################################################
// Incremental java Compilation (http://www.gradle.org/docs/current/release-notes)
// ############################################################################
tasks.withType(JavaCompile) {
	options.incremental = true
}

// ############################################################################
// Build & Distribution
// ############################################################################
jar {
	
	from project.sourceSets.main.allJava

	manifest {
		attributes 'Implementation-Title' : rootProject.name + '-' + project.name, 'Implementation-Version' : version
	}

}

// ############################################################################
// Project Initialization
// ############################################################################
initPackages << {

	sourceSets*.each {
		createPackages(it.java.srcDirs, true)
		createPackages(it.resources.srcDirs, false)
	}
}

// ############################################################################
// Eclipse Project Nature for generated sources
// ############################################################################
import org.gradle.plugins.ide.eclipse.model.SourceFolder
eclipse {

	classpath {
		defaultOutputDir = file("$project.projectDir/bin/main")
		
		file {
			beforeMerged { classpath -> 
				classpath.entries.clear()
			}

			whenMerged { cp ->
				cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/") }*.output = "bin/main"
		  		cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/") }*.output = "bin/test"
			}
		}
	}

	project {
		natures 'org.eclipse.xtext.ui.shared.xtextNature'
		natures 'org.sonar.ide.eclipse.core.sonarNature'
		buildCommand 'org.eclipse.xtext.ui.shared.xtextBuilder'
	}


}

