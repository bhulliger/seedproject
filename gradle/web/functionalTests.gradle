// ############################################################################
// Run Functional Tests (Selenium and others) in a jetty server
// ############################################################################

apply plugin: 'jetty'
apply plugin: 'groovy'

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

// ############################################################################
// Dependencies for all projects
// ############################################################################
ext.seleniumGroup = 'org.seleniumhq.selenium'
ext.seleniumVersion = '2.32.0'

dependencies {
    providedCompile     group: 'javax.servlet',         name: 'servlet-api',            version: '2.5'
    runtime             group: 'javax.servlet',         name: 'jstl',                   version: '1.1.2'

    testCompile         group: 'org.codehaus.groovy',   name: 'groovy',                 version: '2.0.6'
    testCompile         group: 'junit',                 name: 'junit',                  version: '4.11'
    functTestCompile    group: 'org.codehaus.geb',      name: 'geb-junit4',             version: '0.7.2'
    functTestCompile    group: "$seleniumGroup",        name: 'selenium-api',           version: "$seleniumVersion"
    functTestRuntime    group: "$seleniumGroup",        name: 'selenium-firefox-driver', version: "$seleniumVersion"
}

// ############################################################################
// Source Set Definition
// ############################################################################
sourceSets {
    functionalTest {
        java.srcDir file('src/functionalTest/groovy')
        resources.srcDir file('src/functionalTest/resources')
        compileClasspath = sourceSets.main.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

ext {
    functionalTestReportDir = file("$testReportDir/functional")
    functionalTestResultsDir = file("$testResultsDir/functional")
    functionalCommonSystemProperties = ['geb.env': 'firefox', 'geb.build.reportsDir': reporting.file("$name/geb")]
}

ext {
	functionalJettyHttpPort = 8050
    functionalJettyStopPort = 8051
    functionalJettyStopKey = 'stopKey'
	functionalJettyContextPath = config.container.context?.trim() ?: "${rootProject.name}-${project.name}"
}

task localFunctionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath

    reports {
        junitXml {
            destination = file("$reportsDir/functional")
        }
    }

    systemProperties functionalCommonSystemProperties
    systemProperty 'geb.build.baseUrl', "http://localhost:$functionalJettyHttpPort/$functionalJettyContextPath/"
}

task functionalJettyRun(type: org.gradle.api.plugins.jetty.JettyRun) {
	httpPort = functionalJettyHttpPort
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
    contextPath = functionalJettyContextPath
    daemon = true
}

task functionalJettyStop(type: org.gradle.api.plugins.jetty.JettyStop) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
}

functionalJettyRun.dependsOn functionalTestClasses
localFunctionalTest.dependsOn functionalJettyRun
functionalJettyStop.dependsOn localFunctionalTest
task inContainerFunctionalTest(dependsOn: functionalJettyStop)

task remoteFunctionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath

    reports {
        junitXml {
            destination = file("$reportsDir/functional")
        }
    }

    systemProperties functionalCommonSystemProperties
    systemProperty 'geb.build.baseUrl', "http://$config.server.hostname:$config.server.port/$config.server.context/"
}

check.dependsOn inContainerFunctionalTest